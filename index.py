from typing import Any
import random
from aliceio import Dispatcher, Skill
from aliceio.types import AliceResponse, Message, Response
from aliceio.webhook.yandex_functions import (
    OneSkillYandexFunctionsRequestHandler,
    RuntimeContext,
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from questions import ALL_QUESTIONS

dp = Dispatcher()
skill = Skill(skill_id="f3d7c762-28a8-4bd9-90cc-39d325c6ab4b")
requests_handler = OneSkillYandexFunctionsRequestHandler(dp, skill)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
QUESTIONS_PER_GAME = 5
MAX_ATTEMPTS = 2  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å

# –§—Ä–∞–∑—ã
POSITIVE_RESPONSES = [
    "–í–µ—Ä–Ω–æ! üéâ",
    "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üëç", 
    "–¢–æ—á–Ω–æ! üî•",
    "–ò–º–µ–Ω–Ω–æ —Ç–∞–∫! üëè",
    "–ë—Ä–∞–≤–æ! üèÜ"
]
NEGATIVE_RESPONSES = [
    "–ù–µ —Å–æ–≤—Å–µ–º.",
    "–ù–µ—Ç.",
    "–û—à–∏–±–∫–∞.",
    "–ù–µ —É–≥–∞–¥–∞–ª–∏.",
    "–ü–æ—á—Ç–∏."
]

sessionStorage = {}

@dp.message()
async def message_handler(
    message: Message,
    ycf_context: RuntimeContext,
) -> AliceResponse:
    user_id = message.session.user_id
    user_message = message.original_utterance.lower().strip()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥ (—Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
    if user_message in ["–ø–æ–º–æ—â—å", "help", "–ø—Ä–∞–≤–∏–ª–∞"]:
        return await show_help(user_id)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    if message.session.new:
        return await start_new_session(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
    if user_id not in sessionStorage:
        return await start_new_session(user_id)
    
    session = sessionStorage[user_id]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if session["status"] == "greeting":
        if user_message in ["–¥–∞", "–Ω–∞—á–∞—Ç—å", "–ø–æ–µ—Ö–∞–ª–∏", "—Å—Ç–∞—Ä—Ç", "–∏–≥—Ä–∞—Ç—å"]:
            return await start_new_game(user_id)
        elif user_message in ["–Ω–µ—Ç", "–Ω–µ —Ö–æ—á—É", "–ø–æ—Ç–æ–º"]:
            return await send_response(user_id,
                "–•–æ—Ä–æ—à–æ! –ö–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ –∏–≥—Ä–∞—Ç—å - —Å–∫–∞–∂–∏—Ç–µ '–ù–∞—á–∞—Ç—å'.",
                end_session=True
            )
        else:
            return await send_response(user_id,
                "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª–∞. –°–∫–∞–∂–∏—Ç–µ '–ù–∞—á–∞—Ç—å' –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã –∏–ª–∏ '–ü–æ–º–æ—â—å' –¥–ª—è –ø—Ä–∞–≤–∏–ª.",
                end_session=False
            )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    elif session["status"] == "in_progress":
        # –ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–æ –≤—Ä–µ–º—è –≤–æ–ø—Ä–æ—Å–∞
        if user_message in ["—Å—Ç–æ–ø", "–∑–∞–∫–æ–Ω—á–∏—Ç—å", "—Ö–≤–∞—Ç–∏—Ç"]:
            session["status"] = "finished"
            return await send_response(user_id,
                f"–ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {session['score']} –∏–∑ {len(session['questions'])}. "
                "–°–∫–∞–∂–∏—Ç–µ '–ù–∞—á–∞—Ç—å' –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.",
                end_session=True
            )
        
        if user_message in ["–ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–æ–ø—Ä–æ—Å", "–ø–æ–≤—Ç–æ—Ä–∏—Ç—å"]:
            return await repeat_question(user_id)
            
        if user_message == "–æ—Ç–≤–µ—Ç":
            session["waiting_for_answer"] = True
            return await send_response(user_id,
                "–•–æ—Ä–æ—à–æ, —Å–ª—É—à–∞—é –≤–∞—à –æ—Ç–≤–µ—Ç...",
                end_session=False
            )
        
        # –ï—Å–ª–∏ –∂–¥—ë–º –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã "–æ—Ç–≤–µ—Ç"
        if session.get("waiting_for_answer"):
            session["waiting_for_answer"] = False
            return await handle_quiz_answer(user_id, user_message)
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ñ—Ä–∞–∑—ã, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥
        return await send_response(user_id,
            "–Ø –∂–¥—É –æ—Ç –≤–∞—Å –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:\n"
            "'–û—Ç–≤–µ—Ç' - –¥–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å\n"
            "'–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–æ–ø—Ä–æ—Å' - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å\n"
            "'–°—Ç–æ–ø' - –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É\n"
            "'–ü–æ–º–æ—â—å' - –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã",
            end_session=False
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    elif session["status"] == "finished":
        if user_message in ["–¥–∞", "–µ—â–µ", "–µ—â—ë", "—Å—ã–≥—Ä–∞–µ–º"]:
            return await start_new_game(user_id)
        elif user_message in ["–Ω–µ—Ç", "–Ω–µ —Ö–æ—á—É"]:
            return await send_response(user_id,
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!",
                end_session=True
            )
        else:
            return await send_response(user_id,
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É –≤ –î—É–±–û–ö! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - —Å–∫–∞–∂–∏—Ç–µ '–ù–∞—á–∞—Ç—å'.",
                end_session=False
            )
    
    return await start_new_session(user_id)

async def handle_quiz_answer(user_id, user_answer):
    session = sessionStorage[user_id]
    current_question = session["questions"][session["current_question"]]
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    normalized_answer = user_answer.translate(str.maketrans('', '', '!?.,'))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    is_correct = any(
        keyword in normalized_answer 
        for keyword in current_question["a"]
    )
    
    if is_correct:
        response_text = f"{random.choice(POSITIVE_RESPONSES)} {current_question['full']}"
        session["score"] += 1
    else:
        session["attempts"] += 1
        if session["attempts"] < MAX_ATTEMPTS:
            return await send_response(user_id,
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!",
                end_session=False
            )
        response_text = f"{random.choice(NEGATIVE_RESPONSES)} {current_question['full']}"
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    session["current_question"] += 1
    session["attempts"] = 0
    
    if session["current_question"] >= len(session["questions"]):
        return await finish_quiz(user_id)
    else:
        next_question = session["questions"][session["current_question"]]["q"]
        return await send_response(user_id,
            f"{response_text}\n\n–í–æ–ø—Ä–æ—Å {session['current_question'] + 1}: {next_question}\n\n"
            "–°–∫–∞–∂–∏—Ç–µ '–û—Ç–≤–µ—Ç', —á—Ç–æ–±—ã –¥–∞—Ç—å –æ—Ç–≤–µ—Ç.",
            end_session=False
        )

async def repeat_question(user_id):
    if user_id not in sessionStorage or sessionStorage[user_id]["status"] != "in_progress":
        return await send_response(user_id,
            "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –°–∫–∞–∂–∏—Ç–µ '–ù–∞—á–∞—Ç—å' –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.",
            end_session=False
        )
    
    session = sessionStorage[user_id]
    question = session["questions"][session["current_question"]]["q"]
    return await send_response(user_id,
        f"–í–æ–ø—Ä–æ—Å {session['current_question'] + 1}: {question}\n\n"
        "–°–∫–∞–∂–∏—Ç–µ '–û—Ç–≤–µ—Ç', —á—Ç–æ–±—ã –¥–∞—Ç—å –æ—Ç–≤–µ—Ç.",
        end_session=False
    )

async def finish_quiz(user_id):
    session = sessionStorage[user_id]
    session["status"] = "finished"
    score = session["score"]
    total = len(session["questions"])
    
    if score == total:
        result = "üíé –ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã!"
    elif score >= total/2:
        result = f"üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! {score} –∏–∑ {total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!"
    else:
        result = f"üòä –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–ª—É—á–∏—Ç—Å—è –ª—É—á—à–µ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score} –∏–∑ {total}"
    
    return await send_response(user_id,
        f"{result}\n\n–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? (—Å–∫–∞–∂–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç')",
        end_session=False
    )

async def ask_question(user_id):
    session = sessionStorage[user_id]
    question = session["questions"][session["current_question"]]["q"]
    return await send_response(user_id,
        f"–í–æ–ø—Ä–æ—Å {session['current_question'] + 1}: {question}\n\n"
        "–°–∫–∞–∂–∏—Ç–µ '–û—Ç–≤–µ—Ç', —á—Ç–æ–±—ã –¥–∞—Ç—å –æ—Ç–≤–µ—Ç.",
        end_session=False
    )

async def start_new_game(user_id):
    sessionStorage[user_id] = {
        "status": "in_progress",
        "questions": random.sample(ALL_QUESTIONS, QUESTIONS_PER_GAME),
        "current_question": 0,
        "score": 0,
        "attempts": 0,
        "waiting_for_answer": False
    }
    return await ask_question(user_id)

async def start_new_session(user_id):
    sessionStorage[user_id] = {
        "status": "greeting",
        "questions": [],
        "current_question": 0,
        "score": 0,
        "attempts": 0,
        "waiting_for_answer": False
    }
    return await send_response(user_id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø - –î—É–±–û–ö, –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏! üå≥\n\n"
        "–Ø –∑–∞–¥–∞–º –≤–∞–º 5 –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–∏—Ö. "
        "–Ø –ø—Ä–æ–≤–µ—Ä—é –≤–∞—à –æ—Ç–≤–µ—Ç –∏ —Å–∫–∞–∂—É, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ–Ω.\n\n"
        "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –°–∫–∞–∂–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–∞—á–∞—Ç—å'!",
        end_session=False
    )

async def show_help(user_id):
    return await send_response(user_id,
        "üìö –ü—Ä–∞–≤–∏–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –î—É–±–û–ö:\n\n"
        "1. –Ø –∑–∞–¥–∞—é 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã\n"
        "2. –í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å\n"
        "3. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —è –Ω–∞–∑–æ–≤—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç\n"
        "4. –ù–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–∞–µ—Ç—Å—è 2 –ø–æ–ø—ã—Ç–∫–∏\n"
        "5. –í –∫–æ–Ω—Ü–µ –≤—ã —É–∑–Ω–∞–µ—Ç–µ —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n"
        "üîπ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "'–ù–∞—á–∞—Ç—å' - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "'–û—Ç–≤–µ—Ç' - –¥–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å\n"
        "'–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–æ–ø—Ä–æ—Å' - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å\n"
        "'–°—Ç–æ–ø' - –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É\n"
        "'–ü–æ–º–æ—â—å' - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ì–æ—Ç–æ–≤—ã –∏–≥—Ä–∞—Ç—å? –°–∫–∞–∂–∏—Ç–µ '–ù–∞—á–∞—Ç—å'!",
        end_session=False
    )

async def send_response(user_id, text, end_session=False):
    return AliceResponse(
        response=Response(
            text=text,
            end_session=end_session
        ),
        session_state=sessionStorage.get(user_id, {})
    )

async def main(event: dict[str, Any], context: RuntimeContext) -> Any:
    return await requests_handler(event, context)